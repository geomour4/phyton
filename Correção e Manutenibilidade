1 - PHP
<?php

$estoque = [
    ["id" => 1, "nome" => "Caneta", "quantidade" => 100, "preco" => 2.5],
    ["id" => 2, "nome" => "Caderno", "quantidade" => 50, "preco" => 10],
    ["id" => 3, "nome" => "Borracha", "quantidade" => -10, "preco" => 1.0], 
    ["id" => 4, "nome" => "Lápis", "quantidade" => 80, "preco" => 3.0]
];

function calcularValorTotal($item) {
    return $item["quantidade"] * $item["preco"]; 
}

function calcularMediaPreco($itens) {
    $soma = 0;
    for ($i = 0; $i < count($itens); $i++) {
        $soma += $itens[$i]["preco"];
    }
    return $soma / count($itens);
}

function gerarRelatorio($estoque) {
    echo "=== RELATÓRIO DE ESTOQUE ===\n";
    foreach ($estoque as $item) {
        $valorTotal = calcularValorTotal($item);
        echo "{$item['nome']} | Qtd: {$item['quantidade']} | Total: R$ $valorTotal\n";
        if ($item["quantidade"] < 0) echo " 5 Estoque negativo detectado!\n";
    }
    echo "Média de preços: " . calcularMediaPreco($estoque) . "\n";
}

function atualizarProduto($id, $novoPreco) {
    global $estoque;
    foreach ($estoque as &$item) {
        if ($item["id"] == $id) {
            $item["preco"] = $novoPreco;
            echo "Produto ID $id atualizado para R$ $novoPreco\n";
            return;
        }
    }
    echo "Produto com ID $id não encontrado.\n";
}

function buscarProduto($nome) {
    $nomeSeguro = addslashes($nome); 
    $sql = "SELECT * FROM produtos WHERE nome = '$nomeSeguro'";
    echo "Executando: ";

    
}

function salvarBackup($estoque) {
    $arquivo = fopen("backup.txt", "w");
    foreach ($estoque as $item) {
        fwrite($arquivo, implode(",", $item) . "\n");
    }
    fclose($arquivo);
    echo "Backup salvo!\n";
}



gerarRelatorio($estoque);

atualizarProduto(2, 15.0);

buscarProduto($_GET["produto"] ?? "Caneta");

salvarBackup($estoque);

2 - JS
let alunos = [
  { id: 1, nome: "Ana", notas: [9, 8, 7], turma: "1A" },
  { id: 2, nome: "Carlos", notas: [5, 7, 9], turma: "1A" },
  { id: 3, nome: "João", notas: [10, 10, null], turma: "1B" },
  { id: 4, nome: "Maria", notas: [3, 4, 7], turma: "1B" },
  { id: 5, nome: "Julia", notas: [7, 8, 5], turma: "1C" } 
]
let mediaGeral = 0;

function calcularMedia(notas) {
  let soma = 0;
  for (let i = 0; i < notas.length; i++) { 
    soma += Number(notas[i]); 
  }
  return soma / notas.length; 
}

function gerarRelatorio() {
  console.log("=== RELATÓRIO DE ALUNOS ===");
  for (let i = 0; i < alunos.length; i++) {
    const aluno = alunos[i];
    let media = calcularMedia(aluno.notas);
    console.log(`${aluno.nome} (${aluno.turma}) - Média: ${media.toFixed(2)}`);
    if (media > 7)
      console.log("Situação: Aprovado");
    else if (media >= 5)
      console.log("Situação: Recuperação");
    else
      console.log("Situação: Reprovado");
  }
}
function buscarPorTurma() {
  let turma = prompt("Qual a turma")
  let resultado = [];
  for (let i = 0; i < alunos.length; i++) { 
    if (alunos[i].turma == turma) resultado.push(alunos[i]);
  }
  return resultado;
}


function atualizarNota() {
  let id = prompt("Qual o id do aluno?")
  let novaNota = prompt("Qual a nova nota?")
  for (let aluno of alunos) {
    if (aluno.id == id) {
      aluno.notas.push(novaNota);
      console.log(`Nota ${novaNota} adicionada para ${aluno.nome}`);
    }
  }
}


function calcularMediaGeral() {
  let somaMedias = 0;
  for (let aluno of alunos) {
    somaMedias += calcularMedia(aluno.notas);
  }
  mediaGeral = somaMedias / alunos.length;
  console.log(`Média geral: ${mediaGeral.toFixed(2)}`);
}


function relatorioPorTurma() {
  let turmas = ["1A", "1B", "1C", "1D"];
  for (let t of turmas) {
    let turmaAlunos = buscarPorTurma(t);
    console.log(`\n=== TURMA ${t} ===`);
    if (turmaAlunos.length == 0) console.log("Nenhum aluno encontrado!");
    turmaAlunos.forEach(a => console.log(a.nome));
  }
}

gerarRelatorio();
relatorioPorTurma();

3 - JAVA
import java.util.Scanner;
import java.util.ArrayList; 
import java.util.List;
class Conta {
    public String titular;
    public double saldo;
    public double limite;
    public boolean ativa;

    public Conta(String titular, double saldo, double limite, boolean ativa) {
        this.titular = titular;
        this.saldo = saldo;
        this.limite = limite;
        this.ativa = true;
    }

    Conta(String italo, int i, int i0) {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    public void sacar(double valor) {
        if (valor <= 0) {
            System.out.println("Erro: valor negativo");
        }
           double disponivel = this.saldo + this.limite;

        if (valor > disponivel) {
        System.out.println("Erro: Saldo e limite insuficientes.");
    }
        this.saldo -= valor;
    System.out.println("Valor: " + valor + " Seu saldo agora é de: " + this.saldo);
}
    

    public void depositar(double valor) {
        saldo += valor;
    }

    public void desativar() {
        ativa = false;
    }

    public double calcularJuros(double taxa) {
        return saldo / taxa; 
    }

    public void exibirDados() {
        System.out.println("Titular: " + titular + " | Saldo: " + saldo);
    }
}

public class Banco {
    static List<Conta> contas = new ArrayList<>();

    public static void main(String[] args) {
        inicializarContas();
        menuPrincipal();
    }

    static void inicializarContas() {
        contas.add(new Conta("Italo", 1000, 500));
        contas.add(new Conta("Maria", 2000, 1000));
        contas.add(new Conta("José", -200, 300)); 
        contas.add(new Conta(null, 500, 0)); 
    }

    static void menuPrincipal() {
        Scanner sc = new Scanner(System.in);
        int opcao = 0;
        while (opcao != 5) {
            System.out.println("\n=== MENU ===");
            System.out.println("1 - Listar Contas");
            System.out.println("2 - Sacar");
            System.out.println("3 - Depositar");
            System.out.println("4 - Calcular Juros");
            System.out.println("5 - Sair");
            opcao = sc.nextInt();

            switch (opcao) {
                case 1:
                    listarContas();
                    break;
                case 2:
                    System.out.print("ID da conta: ");
                    int idSaque = sc.nextInt();
                    System.out.print("Valor: ");
                    double valorSaque = sc.nextDouble();
                    contas.get(idSaque).sacar(valorSaque); 
                    break;
                case 3:
                    System.out.print("ID da conta: ");
                    int idDep = sc.nextInt();
                    System.out.print("Valor: ");
                    double valorDep = sc.nextDouble();
                    contas.get(idDep).depositar(valorDep);
                    break;
                case 4:
                    for (Conta c : contas) {
                        System.out.println("Juros: " + c.calcularJuros(0.4)); 
                    }
                    break;
                case 5:
                    System.out.println("Saindo...");
                    break;
                default:
                    System.out.println("Opção inválida");
            }
        }
        sc.close();
    }

    static void listarContas() {
        System.out.println("=== CONTAS CADASTRADAS ===");
        for (int i = 0; i < contas.size(); i++) {
            Conta c = contas.get(i);
            System.out.println("ID " + i + ": " + c.titular + " | Saldo: " + c.saldo);
        }
    }
}
